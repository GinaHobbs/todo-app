{"ast":null,"code":"var _jsxFileName = \"/Users/gina/projects/codefellows/code401/todo-app/starter-code/src/components/todo/todo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useForm from '../../hooks/form.js';\nimport { SiteContext } from '../../context/site.js';\nimport { v4 as uuid } from 'uuid';\nimport Header from '../header.js';\nimport Form from '../form.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ToDo = () => {\n  _s();\n\n  const siteContext = useContext(SiteContext);\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const {\n    handleChange,\n    handleSubmit\n  } = useForm(addItem);\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = list.map(item => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n\n      return item;\n    });\n    setList(items);\n  }\n\n  function renderList() {\n    {\n      list.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Assigned to: \", item.assignee]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Difficulty: \", item.difficulty]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => toggleComplete(item.id),\n          children: [\"Complete: \", item.complete.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this));\n    }\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      status: incomplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      handleSubmit: handleSubmit,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), renderList()]\n  }, void 0, true);\n};\n\n_s(ToDo, \"OqpCeE08mvIRSeg+45NUpxWfVjU=\", false, function () {\n  return [useForm];\n});\n\n_c = ToDo;\nexport default ToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"sources":["/Users/gina/projects/codefellows/code401/todo-app/starter-code/src/components/todo/todo.js"],"names":["React","useEffect","useState","useForm","SiteContext","v4","uuid","Header","Form","ToDo","siteContext","useContext","list","setList","incomplete","setIncomplete","handleChange","handleSubmit","addItem","item","console","log","id","complete","deleteItem","items","filter","toggleComplete","map","renderList","text","assignee","difficulty","toString","incompleteCount","length","document","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport useForm from '../../hooks/form.js';\nimport {SiteContext} from '../../context/site.js';\n\nimport { v4 as uuid } from 'uuid';\n\nimport Header from '../header.js'\nimport Form from '../form.js'\n\nconst ToDo = () => {\n\n  const siteContext = useContext(SiteContext);\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter( item => item.id !== id );\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n\n    const items = list.map( item => {\n      if ( item.id == id ) {\n        item.complete = ! item.complete;\n      }\n      return item;\n    });\n\n    setList(items);\n\n  }\n\n  function renderList() {\n    {list.map(item => (\n      <div key={item.id}>\n        <p>{item.text}</p>\n        <p><small>Assigned to: {item.assignee}</small></p>\n        <p><small>Difficulty: {item.difficulty}</small></p>\n        <div onClick={() => toggleComplete(item.id)}>Complete: {item.complete.toString()}</div>\n        <hr />\n      </div>\n    ))}\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n\n  return (\n    <>\n      <Header status={incomplete} />\n      <Form handleSubmit={handleSubmit} handleChange={handleChange} />\n\n      {/* {if (item.complete && siteContext.showCompleted === false)\n        list.filter(item => !item.complete)\n      } */}\n      {renderList()}       \n\n    </>\n  );\n};\n\nexport default ToDo;\n"]},"metadata":{},"sourceType":"module"}