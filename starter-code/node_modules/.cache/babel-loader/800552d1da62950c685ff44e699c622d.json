{"ast":null,"code":"var _jsxFileName = \"/Users/gina/projects/codefellows/code401/todo-app/starter-code/src/components/todo/todo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport useForm from '../../hooks/form.js';\nimport { SiteContext } from '../../context/site.js';\nimport { Button } from \"@blueprintjs/core\";\nimport { v4 as uuid } from 'uuid';\nimport Header from '../header.js';\nimport Form from '../form.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ToDo = () => {\n  _s();\n\n  const siteContext = useContext(SiteContext);\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const {\n    handleChange,\n    handleSubmit\n  } = useForm(addItem);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    console.log(items);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = list.map(item => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n\n      return item;\n    });\n    setList(items);\n  }\n\n  function removeComplete() {\n    //pass in items, filter by status is incomplete\n    const items = list.filter(item => !item.complete); // if showCompleted is false\n\n    if (siteContext.showCompleted === false) {\n      // set the list to only incomplete\n      return items;\n    }\n  }\n\n  function getTotalPages() {\n    const items = removeComplete();\n    const count = Math.ceil(items.length / siteContext.itemsPerPage);\n    console.log(count);\n    let pageNumbers = [];\n\n    for (let i = 1; i <= count; i++) {\n      pageNumbers.push(i);\n    }\n\n    console.log(pageNumbers);\n    return pageNumbers;\n  }\n\n  function pagination() {\n    let items = removeComplete();\n    items = list.slice((currentPage - 1) * siteContext.itemsPerPage, currentPage - 1 + siteContext.itemsPerPage);\n    return items;\n  }\n\n  function handleCurrentPage(item) {\n    setCurrentPage(item);\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      status: incomplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      handleSubmit: handleSubmit,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), getTotalPages().map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n      onSubmit: () => handleCurrentPage(item),\n      children: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)), pagination().map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Assigned to: \", item.assignee]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Difficulty: \", item.difficulty]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => toggleComplete(item.id),\n        children: [\"Complete: \", item.complete.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n};\n\n_s(ToDo, \"ZMB/sxDQoNlbtPSqUJeWZmjCL/A=\", false, function () {\n  return [useForm];\n});\n\n_c = ToDo;\nexport default ToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"sources":["/Users/gina/projects/codefellows/code401/todo-app/starter-code/src/components/todo/todo.js"],"names":["React","useEffect","useState","useContext","useForm","SiteContext","Button","v4","uuid","Header","Form","ToDo","siteContext","list","setList","incomplete","setIncomplete","handleChange","handleSubmit","addItem","currentPage","setCurrentPage","totalPages","setTotalPages","item","console","log","id","complete","deleteItem","items","filter","toggleComplete","map","removeComplete","showCompleted","getTotalPages","count","Math","ceil","length","itemsPerPage","pageNumbers","i","push","pagination","slice","handleCurrentPage","incompleteCount","document","title","text","assignee","difficulty","toString"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport useForm from '../../hooks/form.js';\nimport {SiteContext} from '../../context/site.js';\nimport { Button } from \"@blueprintjs/core\";\n\nimport { v4 as uuid } from 'uuid';\n\nimport Header from '../header.js'\nimport Form from '../form.js'\n\nconst ToDo = () => {\n\n  const siteContext = useContext(SiteContext);\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter( item => item.id !== id );\n    console.log(items)\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = list.map( item => {\n      if ( item.id == id ) {\n        item.complete = ! item.complete;\n      }\n      return item;\n    });\n    setList(items);\n  }\n\n  function removeComplete() {\n    //pass in items, filter by status is incomplete\n    const items = list.filter(item => !item.complete)\n    // if showCompleted is false\n    if (siteContext.showCompleted === false) {\n      // set the list to only incomplete\n      return items;\n    }\n  }\n\n  function getTotalPages() {\n    const items = removeComplete();\n    const count = Math.ceil(items.length / siteContext.itemsPerPage)\n    console.log(count)\n    let pageNumbers = []\n    for (let i=1;i<=count;i++){\n      pageNumbers.push(i)\n    }\n    console.log(pageNumbers)\n    return pageNumbers\n  }\n\n  function pagination() {\n    let items = removeComplete();\n    items = list.slice(((currentPage-1) * siteContext.itemsPerPage), ((currentPage-1) + (siteContext.itemsPerPage)))\n    return items\n  }\n\n  function handleCurrentPage(item) {\n    setCurrentPage(item)\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete).length;\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: ${incomplete}`;\n  }, [list]);\n\n  return (\n    <>\n      <Header status={incomplete} />\n      <Form handleSubmit={handleSubmit} handleChange={handleChange} />\n      {getTotalPages().map(item => (\n        <button onSubmit={() => handleCurrentPage(item)}>{item}</button>\n      ))}\n      {pagination().map(item => (\n        <div key={item.id}>\n          <p>{item.text}</p>\n          <p><small>Assigned to: {item.assignee}</small></p>\n          <p><small>Difficulty: {item.difficulty}</small></p>\n          <div onClick={() => toggleComplete(item.id)}>Complete: {item.complete.toString()}</div>\n          <hr />\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default ToDo;\n"]},"metadata":{},"sourceType":"module"}